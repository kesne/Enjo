About
=====

Enjo is a code wrapper for Jo, which allows you to code using native Enyo syntax, which is then automagically rendered in the browser using Jo widgets. You can read more about Jo at [http://joapp.com](http://joapp.com).

Use
===

With Enyo
---------
Ideally, most Enjo applications should work without any need to change the code. You will, however, need to include both enjo.js and jo.js in your application's index.html page, as well as include the latest version of Jo in your application.

With Jo
-------
Enjo also offers access to Jo's API (You can read about the methods at [http://joapp.com/docs](http://joapp.com/docs]) . To access a kind's Jo widget, just call this.$.kindName.jo(), and it will return the widget. For example, to change a button's caption, you would use the following:

	this.$.kindName.jo().setData("Foo bar");
	
In addition to using Jo within Enyo applications, you can also use Enyo kinds within Jo applications. To do this, simply call the enyo kind within a Jo control.
	
	// initialize jo
	jo.load();
	
	// create our view card, notice we're nesting widgets inline
	var card = new joCard([
	    new joTitle("Hello"),
	    new joCaption("Hello World!"),
	    new joDivider(),
	    
	    //Use an Enyo kind:
		enyo.kind({
        	kind: "VFlexBox",
        	components: [
        		{kind: "Button", caption: "OK", onclick: "clickMethod"}
        	],
        	clickMethod: function(){
        		console.log("It works!");
        	}
        })
        
	]);
	
	// setup our stack and screen
	var stack = new joStack();
	var screen = new joScreen(stack);
	
	// put the card on our view stack
	stack.push(card);

Supported Kinds and Methods
===========================

Right now, not many kinds are supported, and only a select number of methods are supported for those kinds. Support for more kinds and methods will be rolled out soon.
 
- Button

	- Supports the setDisabled method, as well as setCaption.

- RadioGroup

	- Supports the getValue and getIndex methods.

- Input

	- Supports getValue and setValue.

- PasswordInput

	- No methods are currently supported.

- HtmlContent

	- Supports setContent method.

- Label

	- No methods are currently supported.

- Caption

	- No methods are currently supported.

- Header

	- No methods are currently supported.
  
- Toolbar
  
	- No methods are currently supported.
  
- Drawer

	- Supports the open, close, and toggleOpen methods.

- VFlexBox

	- No methods are currently supported.

- HFlexBox

	- No methods are currently supported.

- Scrim

	- Supports setShowing method.

- Function

	- No methods are, or will be supported for the Function kind. The Function kind allows for code to be executed inline.
	
- Scroller
	
	- No methods.

- Container

	- No methods are currently supported.
	

Notes
=====

Enyo, the syntax for which this library is based, [is going to be open sourced](http://www.hp.com/hpinfo/newsroom/press/2011/111209xa.html?mtxs=rss-corp-news). If you're using Enjo for porting purposes, I'd recommend just using Enyo when it gets open sourced.

Things get messy when you start dealing with multi-kind and multi-pane layouts. If you're trying to port over a visually complex layout, things will probably break. 

Enjo's layouts are designed to have one header and one footer. If your layout attempts to use more than one, it will fail miserably. I'm working on fixing this. Scrollers are implemented automagically, and as such, the Scroller kind will only return a joContainer.

There is no current implementation of the Enyo event model, and there is no support for published properties. 

Suggestions? Bug me about them on twitter: [@kesne](http://twitter.com/kesne)